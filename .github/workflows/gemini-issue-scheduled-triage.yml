# 工作流名称
name: '📋 Gemini Scheduled Issue Triage (可复用)'

# 触发条件：定义为可被其他工作流调用
on:
  workflow_call:
    # 这个工作流是自包含的（自己查找issues），不需要外部传入参数(inputs)
    # 但它需要密钥来访问API
    secrets:
      APP_PRIVATE_KEY:
        description: 'GitHub App 的私钥'
        required: false
      GEMINI_API_KEY:
        description: 'Gemini API 的密钥'
        required: false
      GITHUB_TOKEN:
        description: 'GitHub 标准认证 Token'
        required: false

# 并发控制：确保同一时间只有一个计划任务在运行
concurrency:
  group: '${{ github.workflow }}'
  cancel-in-progress: true

# 默认设置
defaults:
  run:
    shell: 'bash'

# 权限设置
permissions:
  contents: 'read'
  id-token: 'write'
  issues: 'write'
  statuses: 'write'

# 作业定义
jobs:
  triage-issues:
    timeout-minutes: 5
    runs-on: 'ubuntu-latest'
    
    # 作业步骤
    steps:
      # 步骤1: 检出代码
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4'

      # 步骤2: (可选) 生成 GitHub App Token
      - name: 'Generate GitHub App Token'
        id: 'generate_token'
        if: ${{ vars.APP_ID != '' }}
        uses: 'actions/create-github-app-token@v2'
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'

      # 步骤3: 查找所有未分类的 Issue
      - name: 'Find untriaged issues'
        id: 'find_issues'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          GITHUB_REPOSITORY: '${{ github.repository }}'
        run: |-
          set -euo pipefail

          echo '🔍 正在查找没有标签的 Issue...'
          # 使用 GitHub CLI 搜索所有没有标签的开放 Issue
          NO_LABEL_ISSUES="$(gh issue list --repo "${GITHUB_REPOSITORY}" \
            --search 'is:open is:issue no:label' --json number,title,body)"

          echo '🏷️ 正在查找需要分类的 Issue...'
          # 使用 GitHub CLI 搜索所有带有 "status/needs-triage" 标签的开放 Issue
          NEED_TRIAGE_ISSUES="$(gh issue list --repo "${GITHUB_REPOSITORY}" \
            --search 'is:open is:issue label:"status/needs-triage"' --json number,title,body)"

          echo '🔄 正在合并和去重...'
          # 将两组结果合并，并根据 Issue 编号去除重复项
          ISSUES="$(echo "${NO_LABEL_ISSUES}" "${NEED_TRIAGE_ISSUES}" | jq -c -s 'add | unique_by(.number)')"

          echo '📝 正在设置输出...'
          # 将找到的 Issue 列表（JSON格式）设置为本步骤的输出，供后续步骤使用
          echo "issues_to_triage=${ISSUES}" >> "${GITHUB_OUTPUT}"

          ISSUE_COUNT="$(echo "${ISSUES}" | jq 'length')"
          echo "✅ 找到 ${ISSUE_COUNT} 个需要分类的 Issue! 🎯"

      # 步骤4: 获取仓库中所有可用的 Labels
      - name: 'Get Repository Labels'
        id: 'get_labels'
        uses: 'actions/github-script@v6'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |-
            const { data: labels } = await github.rest.issues.listLabelsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const labelNames = labels.map(label => label.name);
            core.setOutput('available_labels', labelNames.join(','));
            core.info(`Found ${labelNames.length} labels: ${labelNames.join(', ')}`);
            return labelNames;

      # 步骤5: 运行 Gemini 进行批量 Issue 分析
      # 仅当上一步找到了需要分类的 Issue 时才执行
      - name: 'Run Gemini Issue Analysis'
        if: steps.find_issues.outputs.issues_to_triage != '[]'
        uses: 'google-github-actions/run-gemini-cli@v0'
        id: 'gemini_issue_analysis'
        env:
          GITHUB_TOKEN: ''
          # 将待处理的 Issue 列表（JSON）传入
          ISSUES_TO_TRIAGE: '${{ steps.find_issues.outputs.issues_to_triage }}'
          REPOSITORY: '${{ github.repository }}'
          AVAILABLE_LABELS: '${{ steps.get_labels.outputs.available_labels }}'
        with:
          # Gemini CLI 配置
          gemini_cli_version: '${{ vars.GEMINI_CLI_VERSION }}'
          gcp_workload_identity_provider: '${{ vars.GCP_WIF_PROVIDER }}'
          gcp_project_id: '${{ vars.GOOGLE_CLOUD_PROJECT }}'
          gcp_location: '${{ vars.GOOGLE_CLOUD_LOCATION }}'
          gcp_service_account: '${{ vars.SERVICE_ACCOUNT_EMAIL }}'
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          use_vertex_ai: '${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}'
          use_gemini_code_assist: '${{ vars.GOOGLE_GENAI_USE_GCA }}'
          settings: |-
            {
              "debug": false,
              "maxSessionTurns": 25
            }
          # ... 此处省略了长篇的 prompt ...
          prompt: |-
            ## Role
            You are an issue triage assistant...

      # 步骤6: 将分析出的 Labels 应用到对应的 Issues
      # 仅当上一步 Gemini 成功运行并返回了非空结果时执行
      - name: 'Apply Labels to Issues'
        if: steps.gemini_issue_analysis.outcome == 'success' && steps.gemini_issue_analysis.outputs.summary != '[]'
        env:
          REPOSITORY: '${{ github.repository }}'
          LABELS_OUTPUT: '${{ steps.gemini_issue_analysis.outputs.summary }}'
        uses: 'actions/github-script@v6'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |-
            // 解析 Gemini 返回的包含多个 Issue 分类结果的 JSON 数组
            const rawLabels = process.env.LABELS_OUTPUT;
            core.info(`Raw labels JSON: ${rawLabels}`);
            let parsedLabels;
            try {
              const trimmedLabels = rawLabels.replace(/^```(?:json)?\s*/, '').replace(/\s*```$/, '').trim();
              parsedLabels = JSON.parse(trimmedLabels);
              core.info(`Parsed labels JSON: ${JSON.stringify(parsedLabels)}`);
            } catch (err) {
              core.setFailed(`Failed to parse labels JSON from Gemini output: ${err.message}\nRaw output: ${rawLabels}`);
              return;
            }

            // 遍历数组中的每一个分类结果
            for (const entry of parsedLabels) {
              const issueNumber = entry.issue_number;
              if (!issueNumber) {
                core.info(`Skipping entry with no issue number: ${JSON.stringify(entry)}`);
                continue;
              }

              // 为对应的 Issue 设置 Labels
              if (entry.labels_to_set && entry.labels_to_set.length > 0) {
                await github.rest.issues.setLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  labels: entry.labels_to_set
                });
                const explanation = entry.explanation ? ` - ${entry.explanation}` : '';
                core.info(`Successfully set labels for #${issueNumber}: ${entry.labels_to_set.join(', ')}${explanation}`);
              } else {
                core.info(`No labels to set for #${issueNumber}, leaving as is`);
              }
            }
