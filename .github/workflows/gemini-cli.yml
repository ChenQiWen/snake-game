# 工作流名称
name: '💬 Gemini CLI (可复用)'

# 触发条件：定义为可被其他工作流调用
on:
  workflow_call:
    # 定义输入参数
    inputs:
      user_request:
        description: '从评论或 Issue 正文中提取的用户请求文本'
        required: true
        type: string
      issue_number:
        description: '关联的 Issue 或 PR 编号'
        required: true
        type: number
      is_pr:
        description: '上下文是否为一个 Pull Request (true/false)'
        required: true
        type: boolean
    # 定义所需密钥
    secrets:
      APP_PRIVATE_KEY:
        description: 'GitHub App 的私钥'
        required: false
      GEMINI_API_KEY:
        description: 'Gemini API 的密钥'
        required: false
      GITHUB_TOKEN:
        description: 'GitHub 标准认证 Token'
        required: false

# 并发控制：确保对同一个 Issue/PR 的处理不会重复执行
concurrency:
  group: '${{ github.workflow }}-${{ inputs.issue_number }}'
  cancel-in-progress: true

# 默认设置
defaults:
  run:
    shell: 'bash'

# 权限设置
permissions:
  contents: 'write'      # 需要写入权限来提交代码修改
  id-token: 'write'
  pull-requests: 'write'
  issues: 'write'

# 作业定义
jobs:
  gemini-cli:
    # 调用方负责控制执行逻辑，故移除 'if' 条件
    timeout-minutes: 10
    runs-on: 'ubuntu-latest'
    
    # 作业步骤
    steps:
      # 步骤1: (可选) 生成 GitHub App Token
      - name: 'Generate GitHub App Token'
        id: 'generate_token'
        if: ${{ vars.APP_ID != '' }}
        uses: 'actions/create-github-app-token@v2'
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'

      # 步骤2: 从调用方传入的 inputs 中设置上下文信息
      - name: 'Set context from inputs'
        id: 'get_context'
        run: |-
          echo "user_request=${{ inputs.user_request }}" >> "${GITHUB_OUTPUT}"
          echo "issue_number=${{ inputs.issue_number }}" >> "${GITHUB_OUTPUT}"
          echo "is_pr=${{ inputs.is_pr }}" >> "${GITHUB_OUTPUT}"

      # 步骤3: 设置 Git 提交者信息
      - name: 'Set up git user for commits'
        run: |-
          git config --global user.name 'gemini-cli[bot]'
          git config --global user.email 'gemini-cli[bot]@users.noreply.github.com'

      # 步骤4: 如果是 PR，检出 PR 所在的分支
      - name: 'Checkout PR branch'
        if: steps.get_context.outputs.is_pr == 'true'
        uses: 'actions/checkout@v4'
        with:
          token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          repository: '${{ github.repository }}'
          ref: 'refs/pull/${{ steps.get_context.outputs.issue_number }}/head'
          fetch-depth: 0

      # 步骤5: 如果是 Issue，检出默认主分支
      - name: 'Checkout main branch'
        if: steps.get_context.outputs.is_pr == 'false'
        uses: 'actions/checkout@v4'
        with:
          token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          repository: '${{ github.repository }}'
          fetch-depth: 0

      # 步骤6: 在 Issue/PR 下发表评论，告知用户已开始处理
      - name: 'Acknowledge request'
        env:
          GITHUB_ACTOR: '${{ github.actor }}'
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
          REPOSITORY: '${{ github.repository }}'
        run: |-
          set -euo pipefail
          MESSAGE="@${GITHUB_ACTOR} 我已收到您的请求，正在处理中！🤖"
          gh issue comment "${ISSUE_NUMBER}" --body "${MESSAGE}" --repo "${REPOSITORY}"

      # 步骤7: 获取 Issue 或 PR 的描述正文
      - name: 'Get description'
        id: 'get_description'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          IS_PR: '${{ steps.get_context.outputs.is_pr }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
        run: |-
          set -euo pipefail
          if [[ "${IS_PR}" == "true" ]]; then
            DESCRIPTION=$(gh pr view "${ISSUE_NUMBER}" --json body --template '{{.body}}')
          else
            DESCRIPTION=$(gh issue view "${ISSUE_NUMBER}" --json body --template '{{.body}}')
          fi
          {
            echo "description<<EOF"
            echo "${DESCRIPTION}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      # 步骤8: 获取 Issue 或 PR 的所有评论
      - name: 'Get comments'
        id: 'get_comments'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          IS_PR: '${{ steps.get_context.outputs.is_pr }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
        run: |-
          set -euo pipefail
          if [[ "${IS_PR}" == "true" ]]; then
            COMMENTS=$(gh pr view "${ISSUE_NUMBER}" --json comments --template '{{range .comments}}{{.author.login}}: {{.body}}{{"\n"}}{{end}}')
          else
            COMMENTS=$(gh issue view "${ISSUE_NUMBER}" --json comments --template '{{range .comments}}{{.author.login}}: {{.body}}{{"\n"}}{{end}}')
          fi
          {
            echo "comments<<EOF"
            echo "${COMMENTS}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      # 步骤9: 运行 Gemini CLI 核心逻辑
      - name: 'Run Gemini'
        id: 'run_gemini'
        uses: 'google-github-actions/run-gemini-cli@v0'
        env:
          # 将前面所有步骤收集到的上下文信息传递给 Gemini
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          REPOSITORY: '${{ github.repository }}'
          USER_REQUEST: '${{ steps.get_context.outputs.user_request }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
          IS_PR: '${{ steps.get_context.outputs.is_pr }}'
        with:
          # Gemini CLI 配置
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          gcp_workload_identity_provider: '${{ vars.GCP_WIF_PROVIDER }}'
          gcp_project_id: '${{ vars.GOOGLE_CLOUD_PROJECT }}'
          gcp_location: '${{ vars.GOOGLE_CLOUD_LOCATION }}'
          gcp_service_account: '${{ vars.SERVICE_ACCOUNT_EMAIL }}'
          use_vertex_ai: '${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}'
          use_gemini_code_assist: '${{ vars.GOOGLE_GENAI_USE_GCA }}'
          settings: |-
            {
              "debug": false,
              "maxSessionTurns": 50
            }
          # ... 此处省略了长篇的 prompt ...
          prompt: |-
            ## Role
            You are a helpful AI assistant...
