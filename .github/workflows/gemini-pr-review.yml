# 工作流名称
name: '🧐 Gemini Pull Request Review (可复用)'

# 触发条件：定义为可被其他工作流调用
on:
  workflow_call:
    # 定义调用时可以接收的输入参数
    inputs:
      pr_number:
        description: '需要审查的 Pull Request 编号'
        required: true # 这个参数是必须的
        type: number   # 类型为数字
    # 定义调用时需要接收的密钥
    secrets:
      APP_PRIVATE_KEY:
        description: 'GitHub App 的私钥，用于生成更高权限的 Token'
        required: false # 非必须，如果没有，则会使用默认的 GITHUB_TOKEN
      GEMINI_API_KEY:
        description: '调用 Gemini API 所需的密钥'
        required: false # 非必须，但如果需要使用 Gemini API 则为必须
      GITHUB_TOKEN:
        description: 'GitHub 提供的标准认证 Token'
        required: false # 非必须

# 并发控制：确保对于同一个PR，只有一个审查工作流在运行
concurrency:
  group: '${{ github.workflow }}-${{ github.head_ref || github.ref }}'
  cancel-in-progress: true

# 默认设置
defaults:
  run:
    shell: 'bash' # 默认使用 bash shell

# 权限设置：为工作流运行赋予必要的权限
permissions:
  contents: 'read'       # 读取仓库内容
  id-token: 'write'      # 用于 OpenID Connect (OIDC) 认证，例如与云服务商交互
  issues: 'write'        # 创建和修改 Issue
  pull-requests: 'write' # 创建和修改 Pull Request (例如发表评论)
  statuses: 'write'      # 更新 commit 的状态

# 作业定义
jobs:
  review-pr:
    # 由于这是一个可复用工作流，授权逻辑由调用方处理，因此移除了复杂的 'if' 条件
    timeout-minutes: 5 # 设置作业超时时间为5分钟
    runs-on: 'ubuntu-latest' # 指定运行环境为最新的 Ubuntu 系统
    
    # 作业步骤
    steps:
      # 步骤1: 检出代码
      - name: 'Checkout PR code'
        uses: 'actions/checkout@v4'

      # 步骤2: (可选) 生成 GitHub App Token
      # 仅当仓库变量中设置了 APP_ID 时才执行此步骤
      # 使用 GitHub App 的私钥可以获得比默认 GITHUB_TOKEN 更高的权限和配额
      - name: 'Generate GitHub App Token'
        id: 'generate_token'
        if: ${{ vars.APP_ID != '' }}
        uses: 'actions/create-github-app-token@v2'
        with:
          app-id: '${{ vars.APP_ID }}' # 从仓库变量获取 App ID
          private-key: '${{ secrets.APP_PRIVATE_KEY }}' # 从调用方传入的密钥获取私钥

      # 步骤3: 获取 PR 的详细信息
      - name: 'Get PR details'
        id: 'get_pr'
        env:
          # 优先使用上一步生成的 App Token，如果不存在，则使用标准的 GITHUB_TOKEN
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          # 从调用方传入的 inputs 中获取 PR 编号
          PR_NUMBER: '${{ inputs.pr_number }}'
        run: |-
          set -euo pipefail

          # 将 PR 编号设置为输出，供后续步骤使用
          echo "pr_number=${PR_NUMBER}" >> "${GITHUB_OUTPUT}"

          # 使用 GitHub CLI (gh) 获取 PR 的元数据 (标题、正文、代码增删等)
          PR_DATA="$(gh pr view "${PR_NUMBER}" --json title,body,additions,deletions,changedFiles,baseRefName,headRefName)"
          echo "pr_data=${PR_DATA}" >> "${GITHUB_OUTPUT}"

          # 使用 GitHub CLI 获取 PR 中被修改的文件列表
          CHANGED_FILES="$(gh pr diff "${PR_NUMBER}" --name-only)"
          {
            echo "changed_files<<EOF"
            echo "${CHANGED_FILES}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      # 步骤4: 运行 Gemini 进行 PR 审查
      - name: 'Run Gemini PR Review'
        uses: 'google-github-actions/run-gemini-cli@v0'
        id: 'gemini_pr_review'
        env:
          # 将前面步骤获取到的信息通过环境变量传递给 Gemini CLI
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          PR_NUMBER: '${{ steps.get_pr.outputs.pr_number }}'
          PR_DATA: '${{ steps.get_pr.outputs.pr_data }}'
          CHANGED_FILES: '${{ steps.get_pr.outputs.changed_files }}'
          ADDITIONAL_INSTRUCTIONS: '' # 额外的审查指令，这里留空，可以扩展为 input
          REPOSITORY: '${{ github.repository }}' # 当前仓库信息
        with:
          # Gemini CLI 的配置参数
          gemini_cli_version: '${{ vars.GEMINI_CLI_VERSION }}' # CLI 版本
          gcp_workload_identity_provider: '${{ vars.GCP_WIF_PROVIDER }}' # Google Cloud Workload Identity Provider
          gcp_project_id: '${{ vars.GOOGLE_CLOUD_PROJECT }}' # Google Cloud 项目 ID
          gcp_location: '${{ vars.GOOGLE_CLOUD_LOCATION }}' # Google Cloud 区域
          gcp_service_account: '${{ vars.SERVICE_ACCOUNT_EMAIL }}' # Google Cloud 服务账号
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}' # Gemini API 密钥
          use_vertex_ai: '${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}' # 是否使用 Vertex AI
          use_gemini_code_assist: '${{ vars.GOOGLE_GENAI_USE_GCA }}' # 是否使用 Gemini Code Assist
          settings: |-
            {
              "debug": false,
              "maxSessionTurns": 20
            }
          # ... 此处省略了长篇的 prompt ...
          prompt: |-
            ## Role
            You are an expert code reviewer...

      # 步骤5: (失败时) 发表评论通知用户
      # 仅当上一步 'gemini_pr_review' 失败时执行
      - name: 'Post PR review failure comment'
        if: failure() && steps.gemini_pr_review.outcome == 'failure'
        uses: 'actions/github-script@v6'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |-
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.get_pr.outputs.pr_number }},
              body: 'Gemini CLI PR 审查时出现问题。请检查 [Action 日志](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) 获取详细信息。'
            })
