# 工作流名称
name: '🏷️ Gemini Automated Issue Triage (可复用)'

# 触发条件：定义为可被其他工作流调用
on:
  workflow_call:
    # 定义调用时可以接收的输入参数
    inputs:
      issue_number:
        description: '需要分类的 Issue 编号'
        required: true
        type: number
      issue_title:
        description: 'Issue 的标题'
        required: true
        type: string
      issue_body:
        description: 'Issue 的正文内容'
        required: true
        type: string
    # 定义调用时需要接收的密钥
    secrets:
      APP_PRIVATE_KEY:
        description: 'GitHub App 的私钥'
        required: false
      GEMINI_API_KEY:
        description: 'Gemini API 的密钥'
        required: false
      GITHUB_TOKEN:
        description: 'GitHub 标准认证 Token'
        required: false

# 并发控制：确保对于同一个Issue，只有一个分类工作流在运行
concurrency:
  group: '${{ github.workflow }}-${{ inputs.issue_number }}'
  cancel-in-progress: true

# 默认设置
defaults:
  run:
    shell: 'bash'

# 权限设置
permissions:
  contents: 'read'
  id-token: 'write'
  issues: 'write'
  statuses: 'write'

# 作业定义
jobs:
  triage-issue:
    # 调用方负责控制执行逻辑，故移除 'if' 条件
    timeout-minutes: 5
    runs-on: 'ubuntu-latest'
    
    # 作业步骤
    steps:
      # 步骤1: 检出代码
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4'

      # 步骤2: (可选) 生成 GitHub App Token
      - name: 'Generate GitHub App Token'
        id: 'generate_token'
        if: ${{ vars.APP_ID != '' }}
        uses: 'actions/create-github-app-token@v2'
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'

      # 步骤3: 获取仓库中所有可用的 Labels
      - name: 'Get Repository Labels'
        id: 'get_labels'
        uses: 'actions/github-script@v6'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |-
            const { data: labels } = await github.rest.issues.listLabelsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const labelNames = labels.map(label => label.name);
            core.setOutput('available_labels', labelNames.join(','));
            core.info(`Found ${labelNames.length} labels: ${labelNames.join(', ')}`);
            return labelNames;

      # 步骤4: 运行 Gemini 进行 Issue 分析和分类
      - name: 'Run Gemini Issue Analysis'
        uses: 'google-github-actions/run-gemini-cli@v0'
        id: 'gemini_issue_analysis'
        env:
          # 注意：此处 GITHUB_TOKEN 为空，因为此步骤处理的是可能来自外部的不可信输入
          GITHUB_TOKEN: ''
          # 从调用方传入的 inputs 中获取 Issue 的详细信息
          ISSUE_TITLE: '${{ inputs.issue_title }}'
          ISSUE_BODY: '${{ inputs.issue_body }}'
          ISSUE_NUMBER: '${{ inputs.issue_number }}'
          REPOSITORY: '${{ github.repository }}'
          # 将上一步获取的可用 Labels 列表传入
          AVAILABLE_LABELS: '${{ steps.get_labels.outputs.available_labels }}'
        with:
          # Gemini CLI 的配置
          gemini_cli_version: '${{ vars.GEMINI_CLI_VERSION }}'
          gcp_workload_identity_provider: '${{ vars.GCP_WIF_PROVIDER }}'
          gcp_project_id: '${{ vars.GOOGLE_CLOUD_PROJECT }}'
          gcp_location: '${{ vars.GOOGLE_CLOUD_LOCATION }}'
          gcp_service_account: '${{ vars.SERVICE_ACCOUNT_EMAIL }}'
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          use_vertex_ai: '${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}'
          use_gemini_code_assist: '${{ vars.GOOGLE_GENAI_USE_GCA }}'
          settings: |-
            {
              "debug": false,
              "maxSessionTurns": 25
            }
          # ... 此处省略了长篇的 prompt ...
          prompt: |-
            ## Role
            You are an issue triage assistant...

      # 步骤5: 将 Gemini 分析出的 Labels 应用到 Issue 上
      # 仅当上一步 Gemini 成功输出了分析结果时执行
      - name: 'Apply Labels to Issue'
        if: steps.gemini_issue_analysis.outputs.summary != ''
        env:
          REPOSITORY: '${{ github.repository }}'
          ISSUE_NUMBER: '${{ inputs.issue_number }}'
          LABELS_OUTPUT: '${{ steps.gemini_issue_analysis.outputs.summary }}'
        uses: 'actions/github-script@v6'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |-
            // 解析 Gemini 输出的 JSON 字符串
            const rawLabels = process.env.LABELS_OUTPUT;
            core.info(`Raw labels JSON: ${rawLabels}`);
            let parsedLabels;
            try {
              const trimmedLabels = rawLabels.replace(/^```(?:json)?\s*/, '').replace(/\s*```$/, '').trim();
              parsedLabels = JSON.parse(trimmedLabels);
              core.info(`Parsed labels JSON: ${JSON.stringify(parsedLabels)}`);
            } catch (err) {
              core.setFailed(`Failed to parse labels JSON from Gemini output: ${err.message}\nRaw output: ${rawLabels}`);
              return;
            }

            const issueNumber = parseInt(process.env.ISSUE_NUMBER);

            // 如果 JSON 中包含要设置的 labels，则调用 GitHub API 进行设置
            if (parsedLabels.labels_to_set && parsedLabels.labels_to_set.length > 0) {
              await github.rest.issues.setLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: parsedLabels.labels_to_set
              });
              const explanation = parsedLabels.explanation ? ` - ${parsedLabels.explanation}` : '';
              core.info(`Successfully set labels for #${issueNumber}: ${parsedLabels.labels_to_set.join(', ')}${explanation}`);
            } else {
              core.info(`No labels to set for #${issueNumber}, leaving as is`);
            }

      # 步骤6: (失败时) 发表评论通知用户
      - name: 'Post Issue Analysis Failure Comment'
        if: failure() && steps.gemini_issue_analysis.outcome == 'failure'
        env:
          ISSUE_NUMBER: '${{ inputs.issue_number }}'
          RUN_URL: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        uses: 'actions/github-script@v6'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |-
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(process.env.ISSUE_NUMBER),
              body: 'Gemini CLI Issue 分类时出现问题。请检查 [Action 日志](${process.env.RUN_URL}) 获取详细信息。'
            })
